from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message
from aiogram.client.default import DefaultBotProperties
import asyncio
from config import BOT_TOKEN, ADMIN_ID

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
user_data = {}

@dp.message(F.text == "/start")
async def start_handler(message: Message):
    await message.answer("–ê—Ç—ã“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑:")
    user_data[message.from_user.id] = {"step": "name"}

@dp.message(F.text)
async def handle_text(message: Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        return

    step = user_data[user_id].get("step")

    if step == "name":
        user_data[user_id]["name"] = message.text
        user_data[user_id]["step"] = "problem"
        await message.answer("“ö–∞–Ω–¥–∞–π —Ç–µ—Ö–Ω–∏–∫–∞ –±“±–∑—ã–ª–¥—ã?")
    elif step == "problem":
        user_data[user_id]["problem"] = message.text
        user_data[user_id]["step"] = "location"
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üìç –õ–æ–∫–∞—Ü–∏—è –∂—ñ–±–µ—Ä—É", request_location=True)]],
            resize_keyboard=True, one_time_keyboard=True
        )
        await message.answer("–ê–¥—Ä–µ—Å—ñ“£—ñ–∑–¥—ñ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑:", reply_markup=kb)

@dp.message(F.location)
async def get_location(message: Message):
    user_id = message.from_user.id
    if user_id not in user_data or user_data[user_id].get("step") != "location":
        return

    location = message.location
    user_data[user_id]["address"] = f"{location.latitude}, {location.longitude}"
    user_data[user_id]["map_url"] = f"https://maps.google.com/?q={location.latitude},{location.longitude}"
    user_data[user_id]["step"] = "phone"

    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìû –ù–æ–º–µ—Ä–¥—ñ –∂—ñ–±–µ—Ä—É", request_contact=True)]],
        resize_keyboard=True, one_time_keyboard=True
    )
    await message.answer("–¢–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ“£—ñ–∑–¥—ñ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑:", reply_markup=kb)

@dp.message(F.contact)
async def get_phone(message: Message):
    user_id = message.from_user.id
    if user_id not in user_data or user_data[user_id].get("step") != "phone":
        return

    user_data[user_id]["phone"] = message.contact.phone_number
    data = user_data[user_id]

    text = (
        "üì• –ñ–∞“£–∞ –∑–∞–∫–∞–∑:\n\n"
        f"üë§ –ê—Ç—ã: {data['name']}\n"
        f"üõ† –ü—Ä–æ–±–ª–µ–º–∞: {data['problem']}\n"
        f"üìç –ê–¥—Ä–µ—Å: {data['address']}\n"
        f"üìû –ù–æ–º–µ—Ä: {data['phone']}\n"
        f"üìç –û—Ä–Ω–∞–ª–∞—Å“õ–∞–Ω –∂–µ—Ä: {data['map_url']}"
    )
    await bot.send_message(chat_id=ADMIN_ID, text=text)
    await message.answer("–†–∞“õ–º–µ—Ç! –∑–∞–∫–∞–∑ “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã.")

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    user_data.pop(user_id, None)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
